// Generated by gencpp from file unitree_legged_msgs/StateEstimate.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_STATEESTIMATE_H
#define UNITREE_LEGGED_MSGS_MESSAGE_STATEESTIMATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <unitree_legged_msgs/Cartesian.h>
#include <unitree_legged_msgs/Cartesian.h>
#include <unitree_legged_msgs/Cartesian.h>
#include <unitree_legged_msgs/Cartesian.h>

namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct StateEstimate_
{
  typedef StateEstimate_<ContainerAllocator> Type;

  StateEstimate_()
    : contactEstimate()
    , comPosition()
    , comVelocity()
    , feetPosition2Body()
    , feetVelocity2Body()
    , orientation()
    , rpy()
    , omegaBody()  {
      contactEstimate.assign(0.0);

      orientation.assign(0.0);

      rpy.assign(0.0);

      omegaBody.assign(0.0);
  }
  StateEstimate_(const ContainerAllocator& _alloc)
    : contactEstimate()
    , comPosition(_alloc)
    , comVelocity(_alloc)
    , feetPosition2Body()
    , feetVelocity2Body()
    , orientation()
    , rpy()
    , omegaBody()  {
  (void)_alloc;
      contactEstimate.assign(0.0);

      feetPosition2Body.assign( ::unitree_legged_msgs::Cartesian_<ContainerAllocator> (_alloc));

      feetVelocity2Body.assign( ::unitree_legged_msgs::Cartesian_<ContainerAllocator> (_alloc));

      orientation.assign(0.0);

      rpy.assign(0.0);

      omegaBody.assign(0.0);
  }



   typedef boost::array<float, 4>  _contactEstimate_type;
  _contactEstimate_type contactEstimate;

   typedef  ::unitree_legged_msgs::Cartesian_<ContainerAllocator>  _comPosition_type;
  _comPosition_type comPosition;

   typedef  ::unitree_legged_msgs::Cartesian_<ContainerAllocator>  _comVelocity_type;
  _comVelocity_type comVelocity;

   typedef boost::array< ::unitree_legged_msgs::Cartesian_<ContainerAllocator> , 4>  _feetPosition2Body_type;
  _feetPosition2Body_type feetPosition2Body;

   typedef boost::array< ::unitree_legged_msgs::Cartesian_<ContainerAllocator> , 4>  _feetVelocity2Body_type;
  _feetVelocity2Body_type feetVelocity2Body;

   typedef boost::array<float, 4>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<float, 3>  _rpy_type;
  _rpy_type rpy;

   typedef boost::array<float, 3>  _omegaBody_type;
  _omegaBody_type omegaBody;





  typedef boost::shared_ptr< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> const> ConstPtr;

}; // struct StateEstimate_

typedef ::unitree_legged_msgs::StateEstimate_<std::allocator<void> > StateEstimate;

typedef boost::shared_ptr< ::unitree_legged_msgs::StateEstimate > StateEstimatePtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::StateEstimate const> StateEstimateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator2> & rhs)
{
  return lhs.contactEstimate == rhs.contactEstimate &&
    lhs.comPosition == rhs.comPosition &&
    lhs.comVelocity == rhs.comVelocity &&
    lhs.feetPosition2Body == rhs.feetPosition2Body &&
    lhs.feetVelocity2Body == rhs.feetVelocity2Body &&
    lhs.orientation == rhs.orientation &&
    lhs.rpy == rhs.rpy &&
    lhs.omegaBody == rhs.omegaBody;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17723ab7f9ebaa840eb1c94688165747";
  }

  static const char* value(const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17723ab7f9ebaa84ULL;
  static const uint64_t static_value2 = 0x0eb1c94688165747ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/StateEstimate";
  }

  static const char* value(const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# StateEstimate msg definition for Quadruped Robot\n"
"\n"
" \n"
"float32[4] contactEstimate        # Feet Contact Estimate\n"
"\n"
"Cartesian comPosition             # CoM Position \n"
"Cartesian comVelocity             # CoM Velocity\n"
"\n"
"Cartesian[4] feetPosition2Body    # Feet Position w.r.t to CoM \n"
"Cartesian[4] feetVelocity2Body    # Feet Velocity w.r.t to CoM \n"
"\n"
"float32[4] orientation            # Body Orientation - Quaternion\n"
"float32[3] rpy                    # Body rpy \n"
"float32[3] omegaBody              # Body angular vel\n"
"\n"
"================================================================================\n"
"MSG: unitree_legged_msgs/Cartesian\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.contactEstimate);
      stream.next(m.comPosition);
      stream.next(m.comVelocity);
      stream.next(m.feetPosition2Body);
      stream.next(m.feetVelocity2Body);
      stream.next(m.orientation);
      stream.next(m.rpy);
      stream.next(m.omegaBody);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateEstimate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::StateEstimate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::StateEstimate_<ContainerAllocator>& v)
  {
    s << indent << "contactEstimate[]" << std::endl;
    for (size_t i = 0; i < v.contactEstimate.size(); ++i)
    {
      s << indent << "  contactEstimate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.contactEstimate[i]);
    }
    s << indent << "comPosition: ";
    s << std::endl;
    Printer< ::unitree_legged_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "  ", v.comPosition);
    s << indent << "comVelocity: ";
    s << std::endl;
    Printer< ::unitree_legged_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "  ", v.comVelocity);
    s << indent << "feetPosition2Body[]" << std::endl;
    for (size_t i = 0; i < v.feetPosition2Body.size(); ++i)
    {
      s << indent << "  feetPosition2Body[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::unitree_legged_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "    ", v.feetPosition2Body[i]);
    }
    s << indent << "feetVelocity2Body[]" << std::endl;
    for (size_t i = 0; i < v.feetVelocity2Body.size(); ++i)
    {
      s << indent << "  feetVelocity2Body[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::unitree_legged_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "    ", v.feetVelocity2Body[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "rpy[]" << std::endl;
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      s << indent << "  rpy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpy[i]);
    }
    s << indent << "omegaBody[]" << std::endl;
    for (size_t i = 0; i < v.omegaBody.size(); ++i)
    {
      s << indent << "  omegaBody[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.omegaBody[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_STATEESTIMATE_H
